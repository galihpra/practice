// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	coupons "TugasDay23/features/coupons"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// InsertKupon provides a mock function with given fields: userID, newCoupon
func (_m *Repository) InsertKupon(userID uint, newCoupon coupons.Coupon) (coupons.Coupon, error) {
	ret := _m.Called(userID, newCoupon)

	var r0 coupons.Coupon
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, coupons.Coupon) (coupons.Coupon, error)); ok {
		return rf(userID, newCoupon)
	}
	if rf, ok := ret.Get(0).(func(uint, coupons.Coupon) coupons.Coupon); ok {
		r0 = rf(userID, newCoupon)
	} else {
		r0 = ret.Get(0).(coupons.Coupon)
	}

	if rf, ok := ret.Get(1).(func(uint, coupons.Coupon) error); ok {
		r1 = rf(userID, newCoupon)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadKupon provides a mock function with given fields: page, pageSize
func (_m *Repository) ReadKupon(page int64, pageSize int64) ([]coupons.Coupon, coupons.Pagination, error) {
	ret := _m.Called(page, pageSize)

	var r0 []coupons.Coupon
	var r1 coupons.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(int64, int64) ([]coupons.Coupon, coupons.Pagination, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) []coupons.Coupon); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]coupons.Coupon)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) coupons.Pagination); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Get(1).(coupons.Pagination)
	}

	if rf, ok := ret.Get(2).(func(int64, int64) error); ok {
		r2 = rf(page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReadKuponByUser provides a mock function with given fields: userID
func (_m *Repository) ReadKuponByUser(userID uint) ([]coupons.Coupon, error) {
	ret := _m.Called(userID)

	var r0 []coupons.Coupon
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]coupons.Coupon, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) []coupons.Coupon); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]coupons.Coupon)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
